service: task3

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-central-1
  environment:
    Appointment_Table_Name: ${file(./env.yml):Appointment_Table_Name}
    Table_Name: ${file(./env.yml):Users_Table_Name}
    GSI_Name: ${file(./env.yml):Index_Name}
    Partition_Key: ${file(./env.yml):Partition_Key} # email
    Sort_Key: ${file(./env.yml):Sort_Key} # birthday
    Get_Function: ${self:functions.read.name}
    Assign_Vaccination_Slots_Function: ${self:functions.assignVaccinationDates.name}
    Token_Index_Name: ${file(./env.yml):Token_Index_Name}
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource:
        - Fn::GetAtt: [ UserPool, Arn ]

package:
  exclude:
    - node_modules/**
    - package.json
    - package-lock.json
    - data/**

functions:
  # User Functions
  read:
    handler: handler/read.read
    name: ${self:service}-${sls:stage}-read
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
    events:
      - http:
          path: ${file(./env.yml):UserGetInformation}
          method: get
          authorizer:
            identitySource: method.request.header.Authorization
            type: token
            name: tokenAuthorizer
            resultTtlInSeconds: 0

  create:
    handler: handler/create.create
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
          - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax
    events:
      - http:
          path: ${file(./env.yml):UserRegisterPath}
          method: post

  update:
    handler: handler/update.update
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
          - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax
    events:
      - http:
          path: ${file(./env.yml):UserUpdatePath}
          method: post
          authorizer:
            identitySource: method.request.header.Authorization
            type: token
            name: tokenAuthorizer
            resultTtlInSeconds: 0

  updatePrio:
    handler: handler/updatePrio.updatePrio
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
          - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax
    events:
      - http:
          path: ${file(./env.yml):UserUpdatePrioPath}
          method: post
          authorizer:
            identitySource: method.request.header.Authorization
            type: token
            name: tokenAuthorizer
            resultTtlInSeconds: 0

  delete:
    handler: handler/delete.delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ] # longer way to get the arn JSON like
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
          - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax
    events:
      - http:
          path: ${file(./env.yml):UserDeletePath}
          method: delete
          authorizer:
            identitySource: method.request.header.Authorization
            type: token
            name: tokenAuthorizer
            resultTtlInSeconds: 0

  # Login in and out
  login:
    handler: handler/login.login
    events:
      - http:
          path: ${file(./env.yml):UserLoginPath}
          method: get
          authorizer:
            identitySource: method.request.header.email, method.request.header.birthday, method.request.header.password
            type: request
            name: loginAuthorizer
            resultTtlInSeconds: 0

  userLogout:
    handler: handler/logout.logout
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ] # longer way to get the arn JSON like
    events:
      - http:
          path: ${file(./env.yml):UserLogoutPath}
          method: get
          authorizer:
            identitySource: method.request.header.Authorization
            type: token
            name: tokenAuthorizer
            resultTtlInSeconds: 0

  # Admin Functions
  adminLogin:
    handler: handler/admin/login.login
    events:
      - http:
          path: ${file(./env.yml):AdminLoginPath}
          method: get

  private:
    handler: handler/admin/login.privateArea
    events:
      - http:
          path: /private
          method: post
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  registerAdmin:
    handler: handler/admin/register.register
    events:
      - http:
          path: ${file(./env.yml):AdminRegisterPath}
          method: post
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn

  updateUsersByPlz:
    handler: handler/admin/updateUsersByPlz.updateUsersByPlz
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
          - !Sub '${UsersTable.Arn}/index/${file(./env.yml):Index_Name}'
    events:
      - http:
          path: ${file(./env.yml):AdminUpdateUsersByPlzPath}
          method: post
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn

  listUsersByPlz:
    handler: handler/admin/listUsersByPlz.listUsersByPlz
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - !Sub '${UsersTable.Arn}/index/${file(./env.yml):Index_Name}'
    events:
      - http:
          path: ${file(./env.yml):AdminListUsersByPlzPath}
          method: get
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn

  assignVaccinationDates:
    handler: handler/admin/assignVaccinationDatesByPlz.assignVaccinationDatesByPlz
    name: ${self:service}-${sls:stage}-assignVaccinationDates
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - !Sub '${UsersTable.Arn}/index/${file(./env.yml):Index_Name}'
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
      - Effect: "Allow"
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: "*"
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
          - "Fn::GetAtt": [ VacAppointmentTable, Arn ]
    events:
      - http:
          path: ${file(./env.yml):AdminAssignVaccinationDates}
          method: post
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn


  assignOpenVaccinationDates:
    handler: handler/admin/assignOpenVaccinationDatesByPlz.assignOpenVaccinationDatesByPlz
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - !Sub '${UsersTable.Arn}/index/${file(./env.yml):Index_Name}'
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Scan
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
          - "Fn::GetAtt": [ VacAppointmentTable, Arn ]
      - Effect: "Allow"
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: "*"
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
          - "arn:aws:lambda:eu-central-1:062983379312:function:assignVaccinationDates"
          - !GetAtt AssignVaccinationDatesLambdaFunction.Arn
    events:
      - http:
          path: ${file(./env.yml):AdminAssignOpenVaccinationDates}
          method: post
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn


  ## NO AUTHORIZER YET
  addVaccinationDates:
    handler: admin/addVaccinationDates.addVaccinationDates
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          - "Fn::GetAtt": [ VacAppointmentTable, Arn ]
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
          - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax
    events:
      - http:
          path: ${file(./env.yml):AdminAddVaccinationDates}
          method: post
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn


  # Authorizer Functions
  tokenAuthorizer:
    handler: authorizer/tokenAuthorizer.authorizer
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]
          - !Sub "${UsersTable.Arn}/index/${file(./env.yml):Token_Index_Name}"

  loginAuthorizer:
    handler: authorizer/loginAuthorizer.authorizer
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]

  # Additional Functions
  logItemChanges:
    handler: handler/logItemChanges.logItemChanges
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ UsersTable, StreamArn ]
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ]

resources: # CloudFormation template syntax from here on.
  Resources:
    UsersTable: #must be same as TableName
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./env.yml):Users_Table_Name}
        AttributeDefinitions:
          - AttributeName: ${file(./env.yml):Partition_Key} # email
            AttributeType: S # S = String, N would be for Number
          - AttributeName: ${file(./env.yml):Sort_Key} # Birthday as number for better filtering with key expression
            AttributeType: S # N for number, must be parsed from user inputed String in ISO 8601 format!!!
          - AttributeName: ${file(./env.yml):Partition_Key2} # Plz
            AttributeType: S # S = String, N would be for Number
          - AttributeName: ${file(./env.yml):Token_Partition_Key}
            AttributeType: S
        KeySchema:
          - AttributeName: ${file(./env.yml):Partition_Key}
            KeyType: HASH # primary key
          - AttributeName: ${file(./env.yml):Sort_Key}
            KeyType: RANGE # sort key
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${file(./env.yml):Index_Name}
            KeySchema:
              - AttributeName: ${file(./env.yml):Partition_Key2} # Plz
                KeyType: "HASH"
              - AttributeName: ${file(./env.yml):Sort_Key} # Birthday
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
          - IndexName: ${file(./env.yml):Token_Index_Name}
            KeySchema:
              - AttributeName: ${file(./env.yml):Token_Partition_Key} # Token
                KeyType: "HASH"
              - AttributeName: ${file(./env.yml):Token_Sort_Key} # Email
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"

    VacAppointmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./env.yml):Appointment_Table_Name}
        AttributeDefinitions:
          - AttributeName: ${file(./env.yml):Appointment_Partition_Key}
            AttributeType: S
          - AttributeName: ${file(./env.yml):Appointment_Sort_Key}
            AttributeType: S
        KeySchema:
          - AttributeName: ${file(./env.yml):Appointment_Partition_Key}
            KeyType: HASH
          - AttributeName: ${file(./env.yml):Appointment_Sort_Key}
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: UserPool
        UsernameAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        AutoVerifiedAttributes: [ "email" ]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline
