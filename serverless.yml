service: task1

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-central-1
  environment:
    Table_Name: ${file(./env.yml):Table_Name}
    Partition_Key: ${file(./env.yml):Partition_Key}
    Sort_Key: ${file(./env.yml):Sort_Key}
    Get_Function: "getUser"

functions:
  logItemChanges:
    handler: handler.logItemChanges
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [UsersTable, StreamArn]
    iamRoleStatementsName: logItemChangesRole #optional custom role name setting instead of the default generated one
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams       
        Resource: 
          - "Fn::GetAtt": [UsersTable, Arn] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
  getUser:
    handler: handler.getItemFromDB
    name: getUser
    iamRoleStatementsName: getItemFromDBRole #optional custom role name setting instead of the default generated one
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:GetItem
        Resource: 
          - "Fn::GetAtt": [UsersTable, Arn] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
      #events:
      #- http:
          #path: Hier route eintragen
          #method: GET
  putOrPost: 
    handler: handler.create
    iamRoleStatementsName: writeToDBRole #optional custom role name setting instead of the default generated one
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem  
          - dynamodb:Query
        Resource:
          - "Fn::GetAtt": [ UsersTable, Arn ] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
        Resource:
        #  - "*"
        #  - "Fn::GetAtt": [ GetUserLambdaFunction , Arn ]
           - !GetAtt GetUserLambdaFunction.Arn

  
resources: # CloudFormation template syntax from here on.
  Resources:
    UsersTable: #must be same as TableName
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S # S = String
          - AttributeName: Name
            AttributeType: S # S for String
          # - AttributeName: Surname
          #   AttributeType: S   
        KeySchema:
          - AttributeName: email
            KeyType: HASH   
          - AttributeName: Name
            KeyType: RANGE
        # LocalSecondaryIndexes:
        # - IndexName: by-Surname
        #   KeySchema: 
        #   - AttributeName: ID
        #     KeyType: HASH
        #   - AttributeName: Surname
        #     KeyType: RANGE  
        #   Projection: 
        #     ProjectionType: ALL  
        # - IndexName: by-Name
        #   KeySchema: 
        #   - AttributeName: ID
        #     KeyType: HASH
        #   - AttributeName: Name
        #     KeyType: RANGE  
        #   Projection: 
        #     ProjectionType: ALL  
        StreamSpecification:
           StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST
       # ProvisionedThroughput:
        #  ReadCapacityUnits: 1
        #  WriteCapacityUnits: 1
plugins:
  - serverless-iam-roles-per-function
