service: task1

frameworkVersion: "2"

provider:
    name: aws
    runtime: nodejs12.x
    lambdaHashingVersion: 20201221
    region: eu-central-1
    environment:
        Table_Name: ${file(./env.yml):Table_Name}
        Partition_Key: ${file(./env.yml):Partition_Key}
        Sort_Key: ${file(./env.yml):Sort_Key}
        Get_Function: ${self:functions.read.name}

package:
    exclude:
        - node_modules/**
        - package.json
        - package-lock.json
        - data/**

functions:
    logItemChanges:
        handler: handler/logItemChanges.logItemChanges
        events:
            - stream:
                  type: dynamodb
                  arn:
                      Fn::GetAtt: [UsersTable, StreamArn]
        iamRoleStatementsName: logItemChangesRole #optional custom role name setting instead of the default generated one
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
              Resource:
                  - "Fn::GetAtt": [UsersTable, Arn] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
    read:
        handler: handler/read.read
        name: read
        iamRoleStatementsName: readFromDBRole #optional custom role name setting instead of the default generated one
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - dynamodb:GetItem
              Resource:
                  - "Fn::GetAtt": [UsersTable, Arn] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
            #events:
            #- http:
            #path: Hier route eintragen
            #method: GET
    create:
        handler: handler/create.create
        iamRoleStatementsName: writeToDBRole #optional custom role name setting instead of the default generated one
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - dynamodb:PutItem
              Resource:
                  - "Fn::GetAtt": [UsersTable, Arn] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
            - Effect: "Allow"
              Action:
                  - lambda:InvokeFunction
              Resource:
                  #  - "Fn::GetAtt": [ ReadLambdaFunction , Arn ] longer way to get the arn JSON like
                  - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax
    update:
        handler: handler/update.update
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - dynamodb:PutItem
              Resource:
                  - "Fn::GetAtt": [UsersTable, Arn] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
            - Effect: "Allow"
              Action:
                  - lambda:InvokeFunction
              Resource:
                  #  - "Fn::GetAtt": [ ReadLambdaFunction , Arn ] longer way to get the arn JSON like
                  - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax
    delete:
        handler: handler/delete.delete
        iamRoleStatements:
            - Effect: "Allow"
              Action:
                  - dynamodb:DeleteItem
              Resource:
                  - "Fn::GetAtt": [UsersTable, Arn] # Fn::GetAtt: [ logicalNameOfResource, attributeName ] - this is for getting the Arn(Identifier) of the resource usersTable
            - Effect: "Allow"
              Action:
                  - lambda:InvokeFunction
              Resource:
                  #  - "Fn::GetAtt": [ ReadLambdaFunction , Arn ] longer way to get the arn JSON like
                  - !GetAtt ReadLambdaFunction.Arn # shortcut to get arn, yaml syntax

resources: # CloudFormation template syntax from here on.
    Resources:
        UsersTable: #must be same as TableName
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${file(./env.yml):Table_Name}
                AttributeDefinitions:
                    - AttributeName: ${file(./env.yml):Partition_Key}
                      AttributeType: S # S = String, N would be for Number
                    - AttributeName: ${file(./env.yml):Sort_Key}
                      AttributeType: S # S for String
                KeySchema:
                    - AttributeName: ${file(./env.yml):Partition_Key}
                      KeyType: HASH # primary key
                    - AttributeName: ${file(./env.yml):Sort_Key}
                      KeyType: RANGE # sort key
                # LocalSecondaryIndexes:
                # - IndexName: by-Surname
                #   KeySchema:
                #   - AttributeName: ID
                #     KeyType: HASH
                #   - AttributeName: Surname
                #     KeyType: RANGE
                #   Projection:
                #     ProjectionType: ALL
                # - IndexName: by-Name
                #   KeySchema:
                #   - AttributeName: ID
                #     KeyType: HASH
                #   - AttributeName: Name
                #     KeyType: RANGE
                #   Projection:
                #     ProjectionType: ALL
                StreamSpecification:
                    StreamViewType: NEW_AND_OLD_IMAGES
                BillingMode: PAY_PER_REQUEST
                # ProvisionedThroughput:
                #  ReadCapacityUnits: 1
                #  WriteCapacityUnits: 1
plugins:
    - serverless-iam-roles-per-function
